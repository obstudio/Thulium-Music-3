# Thulium 语言概述

^ 语言简介

- Thulium 语言是一种集记谱、播放功能为一体的新型音乐文件格式。它是一种文本化的音乐格式，因此只需要使用文本编辑器就能高效地编写音乐。
- Thulium 语言以简谱、五线谱符号为基础，再融入函数、子音轨、宏等功能，使得它既功能强大又简单易学。因此，如果你对简谱、五线谱或编程有一定的了解，你将十分容易掌握使用 Thulium 语言来编写音乐的方法。

## 目录

- [简单的语法]
- [丰富的函数]

^ 简单的语法

Thulium 的基本语法非常简单。直接输入下面的代码，便生成了一段大家耳熟能详的音乐：

>>> (1=bE) 0333|1---|0222|7,---|

我们可以看到，这段音乐中用数字表示唱名和休止符，用`-`表示延长一拍，用`|`表示小节线，用`(1=bE)`表示降 E 大调，这都与简谱记号完全相同。事实上，我们的绝大部分记号都来源于简谱和五线谱。类似的例子还有很多：

- 用`.`表示附点，支持多附点语法
- 用`^`表示连音线和圆滑线
- 用`||:`，`:||`表示反复记号
- 用`[1.2.]`表示反复跳跃记号

查看详细的语法说明，你能了解到更多源于五线谱和简谱的特性。这些特性使得这门语言的上手变得极为简单。

^ 丰富的函数

尽管 Thulium 拥有着丰富的语法表示，但这丝毫不会干扰 Thulium 语言的严谨性。Thulium 语言使用统一的“音轨”概念。任何我们书写的 Thulium 代码都可以理解成音轨或音轨的集合。许多记号实际上是函数的简记法，比如刚刚展示的`(1=bE)`就等价于`Key("bE")`。事实上，我们提供了丰富的函数用于配置音乐的信息：

- `Oct`函数用于调整当前乐谱的八度升降
- `Spd`函数用于调整当前乐谱的速度
- `Vol`函数用于调整当前乐谱的音量
- `Stac`函数用于配置顿音的时值缩短系数
- `Fade`函数用于在当前位置添加渐弱或渐强效果

当然，函数不仅能修改乐谱的配置，更能够进行乐谱操作：

- `Tremolo1`函数用于添加一个单震音
- `Tuplet`函数用于添加一个 n 连音
- `GraceNote`函数用于添加一个前倚音
- `Extend`函数用于延长一个音轨中音的时值
- `MIDI`函数用于直接添加一个 MIDI 事件

我们为每一个函数都提供了详细的文档，查看这些文档，你会逐渐领会到 Thulium 语言的强大之处。

^ 音轨和乐章

Thulium 乐谱文件的两个基本结构是音轨和乐章。音轨作为 Thulium 的基本概念，在函数的调用和返回、乐章的属性配置、乐谱的宏调用等方面均发挥这举足轻重的作用。音轨具有独立的作用域，允许嵌套书写，且会继承上层音轨的配置信息。我们在`.tm`文件中书写的乐谱都是音轨，不同的音轨以空行分隔。我们也音轨中使用花括号创建一个子音轨。在主音轨（顶级音轨）的开头可以声明音轨的基本信息，包括音轨名，乐器等等。声明过名字的音轨可以在之后被调用，只需使用`@name`即可。这样调用的音轨被理解成所在音轨的一个子音轨。

子音轨自带有一套反复语法。使用子音轨开头的`n*`可以声明子音轨的反复次数。在子音轨中使用`/`可以将子音轨划分成同时开始的两个部分。在子音轨中使用`\x:`声明之后的内容仅在第 x 次反复时播放，等等。这些记号使得 Thulium 文件的记录更加简单，为记谱者提供了更多的便利。
